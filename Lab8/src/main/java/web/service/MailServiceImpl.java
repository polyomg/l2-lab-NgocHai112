package web.service;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class MailServiceImpl implements MailService {

    private final JavaMailSender mailSender;
    private final List<Mail> queue = new ArrayList<>();

    @Override
    public void send(Mail mail) { // ‚úÖ G·ª≠i mail tr·ª±c ti·∫øp (d√πng l·∫°i t·ª´ b√†i 1)
        try {
            MimeMessage message = mailSender.createMimeMessage(); // T·∫°o mail tr·ªëng
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");

            // --- 2.1 Ghi th√¥ng tin ng∆∞·ªùi g·ª≠i ---
            helper.setFrom(mail.getFrom());
            helper.setReplyTo(mail.getFrom());

            // --- 2.2 Ghi th√¥ng tin ng∆∞·ªùi nh·∫≠n ---
            helper.setTo(mail.getTo());
            if (!isNullOrEmpty(mail.getCc())) helper.setCc(mail.getCc());
            if (!isNullOrEmpty(mail.getBcc())) helper.setBcc(mail.getBcc());

            // --- 2.3 Ti√™u ƒë·ªÅ & n·ªôi dung ---
            helper.setSubject(mail.getSubject());
            helper.setText(mail.getBody(), true); // true = HTML

            // --- 2.4 ƒê√≠nh k√®m file ---
            if (!isNullOrEmpty(mail.getFilename())) {
                for (String fn : mail.getFilename().split("[,;]+")) {
                    File file = new File(fn.trim());
                    helper.addAttachment(file.getName(), file);
                }
            }

            mailSender.send(message); // ‚úÖ G·ª≠i mail th·∫≠t s·ª±
            System.out.println("‚úÖ ƒê√£ g·ª≠i mail ƒë·∫øn: " + mail.getTo());
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void push(Mail mail) { // ‚úÖ ƒê·∫©y mail v√†o h√†ng ƒë·ª£i (kh√¥ng g·ª≠i ngay)
        queue.add(mail);
        System.out.println("üì® Mail ƒë√£ ƒë∆∞·ª£c x·∫øp h√†ng ƒë·ª£i: " + mail.getTo());
    }

    // ‚úÖ Ch·∫°y n·ªÅn m·ªói 500ms: n·∫øu c√≥ mail trong h√†ng ƒë·ª£i th√¨ g·ª≠i
    @Scheduled(fixedDelay = 500)
    public void run() {
        while (!queue.isEmpty()) {
            try {
                Mail mail = queue.remove(0);
                this.send(mail);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private boolean isNullOrEmpty(String text) {
        return text == null || text.trim().isEmpty();
    }
}
